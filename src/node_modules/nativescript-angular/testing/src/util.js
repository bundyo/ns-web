var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const frame_1 = require("tns-core-modules/ui/frame");
const testing_1 = require("@angular/core/testing");
const core_1 = require("@angular/core");
const nativescript_module_1 = require("../../nativescript.module");
const testing_2 = require("@angular/platform-browser-dynamic/testing");
const platform_1 = require("../../platform");
const index_1 = require("../index");
const common_1 = require("@angular/common");
const grid_layout_1 = require("tns-core-modules/ui/layouts/grid-layout");
const TESTING_ROOT_ID = "__testing_container";
function testingRootView() {
    const rootPageLayout = frame_1.topmost().currentPage.content;
    let testingRoot;
    rootPageLayout.eachChild(child => {
        if (child.id === TESTING_ROOT_ID) {
            testingRoot = child;
            return false;
        }
        return true;
    });
    if (!testingRoot) {
        testingRoot = new grid_layout_1.GridLayout();
        testingRoot.id = TESTING_ROOT_ID;
        grid_layout_1.GridLayout.setColumnSpan(testingRoot, 100);
        grid_layout_1.GridLayout.setRowSpan(testingRoot, 100);
        rootPageLayout.addChild(testingRoot);
    }
    return testingRoot;
}
exports.testingRootView = testingRootView;
const activeTestFixtures = [];
function promiseWait(durationMs) {
    return () => new Promise((resolve) => setTimeout(() => resolve(), durationMs));
}
exports.promiseWait = promiseWait;
function nsTestBedInit() {
    testing_1.TestBed.initTestEnvironment(index_1.NativeScriptTestingModule, testing_2.platformBrowserDynamicTesting(platform_1.NS_COMPILER_PROVIDERS));
}
exports.nsTestBedInit = nsTestBedInit;
function nsTestBedBeforeEach(components, providers = [], imports = [], entryComponents = []) {
    return (done) => {
        activeTestFixtures.push([]);
        if (entryComponents.length === 0) {
            testing_1.TestBed.configureTestingModule({
                declarations: [...components],
                providers: [...providers],
                imports: [nativescript_module_1.NativeScriptModule, ...imports]
            });
        }
        else {
            testing_1.TestBed.resetTestEnvironment();
            let EntryComponentsTestModule = class EntryComponentsTestModule {
            };
            EntryComponentsTestModule = __decorate([
                core_1.NgModule({
                    declarations: entryComponents,
                    exports: entryComponents,
                    entryComponents: entryComponents
                })
            ], EntryComponentsTestModule);
            testing_1.TestBed.initTestEnvironment(EntryComponentsTestModule, testing_2.platformBrowserDynamicTesting(platform_1.NS_COMPILER_PROVIDERS));
            testing_1.TestBed.configureTestingModule({
                declarations: components,
                imports: [
                    nativescript_module_1.NativeScriptModule, index_1.NativeScriptTestingModule, common_1.CommonModule,
                    ...imports
                ],
                providers: [...providers, ...index_1.NATIVESCRIPT_TESTING_PROVIDERS],
            });
        }
        testing_1.TestBed.compileComponents()
            .then(() => done())
            .catch((e) => {
            console.log(`Failed to instantiate test component with error: ${e}`);
            console.log(e.stack);
            done();
        });
    };
}
exports.nsTestBedBeforeEach = nsTestBedBeforeEach;
function nsTestBedAfterEach(resetEnv = true, resetFn = nsTestBedInit) {
    return () => {
        if (activeTestFixtures.length === 0) {
            throw new Error(`There are no more declared fixtures.` +
                `Did you call "nsTestBedBeforeEach" and "nsTestBedAfterEach" an equal number of times?`);
        }
        const root = testingRootView();
        const fixtures = activeTestFixtures.pop();
        fixtures.forEach((fixture) => {
            const fixtureView = fixture.nativeElement;
            if (fixtureView.parent === root) {
                root.removeChild(fixtureView);
            }
            fixture.destroy();
        });
        testing_1.TestBed.resetTestingModule();
        if (resetEnv) {
            testing_1.TestBed.resetTestEnvironment();
            resetFn();
        }
    };
}
exports.nsTestBedAfterEach = nsTestBedAfterEach;
function nsTestBedRender(componentType) {
    const fixture = testing_1.TestBed.createComponent(componentType);
    fixture.detectChanges();
    return fixture.whenRenderingDone()
        .then(promiseWait(100))
        .then(() => {
        const list = activeTestFixtures[activeTestFixtures.length - 1];
        if (!list) {
            console.warn("nsTestBedRender called without nsTestBedBeforeEach/nsTestBedAfter each. " +
                "You are responsible for calling 'fixture.destroy()' when your test is done " +
                "in order to clean up the components that are created.");
        }
        else {
            list.push(fixture);
        }
        return fixture;
    });
}
exports.nsTestBedRender = nsTestBedRender;
//# sourceMappingURL=util.js.map